version: "3.9"
services:
  auth-proxy:
    image: quay.io/oauth2-proxy/oauth2-proxy:v7.3.0
    restart: unless-stopped
    command:
      # when authenticated, return a static 202 response
      # https://oauth2-proxy.github.io/oauth2-proxy/docs/configuration/overview/#forwardauth-with-static-upstreams-configuration
      - --upstream=static://202
    environment:
      # service settings
      OAUTH2_PROXY_HTTP_ADDRESS: 0.0.0.0:4180
      OAUTH2_PROXY_REVERSE_PROXY: "true"
      OAUTH2_PROXY_SET_XAUTHREQUEST: "true"
      OAUTH2_PROXY_SET_AUTHORIZATION_HEADER: "true"
      OAUTH2_PROXY_PASS_AUTHORIZATION_HEADER: "true"
      OAUTH2_PROXY_PASS_USER_HEADERS: "true"
      OAUTH2_PROXY_PASS_ACCESS_TOKEN: "true"
      # allow validation of JWTs in Authorization HTTP header
      # https://medium.com/in-the-weeds/service-to-service-authentication-on-kubernetes-94dcb8216cdc#20d0
      OAUTH2_PROXY_SKIP_JWT_BEARER_TOKENS: "true"

      # general cookie settings
      OAUTH2_PROXY_EMAIL_DOMAINS: "*"
      OAUTH2_PROXY_COOKIE_EXPIRE: 30m
      OAUTH2_PROXY_COOKIE_REFRESH: 1m
      OAUTH2_PROXY_INSECURE_OIDC_ALLOW_UNVERIFIED_EMAIL: "true"
      # claim to base session cookie on; Keycloak account email not always set
      OAUTH2_PROXY_USER_ID_CLAIM: preferred_username

      # OIDC integration settings
      OAUTH2_PROXY_PROVIDER: oidc
      OAUTH2_PROXY_PROVIDER_DISPLAY_NAME: Keeycloak
      OAUTH2_PROXY_OIDC_ISSUER_URL: https://keycloak.128.208.230.197.nip.io/auth/realms/fEMR
      OAUTH2_PROXY_CLIENT_ID: auth_proxy_test
      OAUTH2_PROXY_CLIENT_SECRET: 74c6fdc4-4086-4a21-bf40-49c7ee74357e
      OAUTH2_PROXY_SCOPE: openid profile email

      # security settings
      OAUTH2_PROXY_COOKIE_DOMAINS: .128.208.230.197.nip.io
      OAUTH2_PROXY_COOKIE_SECRET: OQINaROshtE9TcZkNAm-5Zs2Pv3xaWytBmc5W7sPX7w=
      OAUTH2_PROXY_WHITELIST_DOMAINS: .128.208.230.197.nip.io

    labels:
      traefik.enable: "true"
      traefik.http.routers.auth-proxy.rule: Host(`auth-proxy.128.208.230.197.nip.io`) || PathPrefix(`/oauth2`)
      traefik.http.routers.auth-proxy.middlewares: auth-headers
      traefik.http.routers.auth-proxy.entrypoints: websecure
      traefik.http.routers.auth-proxy.tls.certresolver: letsencrypt
      traefik.http.routers.auth-proxy.tls: "true"
      traefik.http.services.auth-proxy.loadbalancer.server.port: 4180

      # TODO move to common config
      # best-practice HTTPS headers
      traefik.http.middlewares.auth-headers.headers.forceSTSHeader: "true"
      traefik.http.middlewares.auth-headers.headers.sslHost: auth-proxy.128.208.230.197.nip.io
      traefik.http.middlewares.auth-headers.headers.stsIncludeSubdomains: "true"
      traefik.http.middlewares.auth-headers.headers.stsPreload: "true"
      traefik.http.middlewares.auth-headers.headers.sslRedirect: "true"
      traefik.http.middlewares.auth-headers.headers.stsSeconds: 315360000
      traefik.http.middlewares.auth-headers.headers.browserXssFilter: "true"
      traefik.http.middlewares.auth-headers.headers.contentTypeNosniff: "true"
      traefik.http.middlewares.auth-headers.headers.frameDeny: "true"

      traefik.http.middlewares.oidc-auth.forwardAuth.address: http://auth-proxy:4180/
      traefik.http.middlewares.oidc-auth.forwardAuth.trustForwardHeader: "true"
      traefik.http.middlewares.oidc-auth.forwardAuth.authResponseHeaders: X-Auth-Request-User,X-Auth-Request-Email,X-Auth-Request-Access-Token,Authorization
    networks:
      ingress:
      internal:

  whoami:
    image: containous/whoami
    labels:
      traefik.enable: "true"
      traefik.http.routers.whoami.rule: Host(`whoami.128.208.230.197.nip.io`)
      traefik.http.routers.whoami.middlewares: oidc-auth
      traefik.http.routers.whoami.entrypoints: websecure
      traefik.http.routers.whoami.tls.certresolver: letsencrypt
      traefik.http.routers.whoami.tls: "true"
      traefik.http.services.whoami.loadbalancer.server.port: 80
    networks:
      ingress:
      internal:

  postgrest:
    image: postgrest/postgrest
    environment:
      PGRST_DB_URI: postgres://app_user:secret@postgres:5432/app_db
      PGRST_DB_SCHEMA: api
      PGRST_DB_ANON_ROLE: web_anon
      PGRST_JWT_SECRET: ${PGRST_JWT_SECRET}
    depends_on:
      - postgres
    labels:
      traefik.enable: "true"
      traefik.http.routers.postgrest.rule: "Host(`postgrest.128.208.230.197.nip.io`)"
      traefik.http.routers.postgrest.middlewares: oidc-auth
      traefik.http.routers.postgrest.entrypoints: websecure
      traefik.http.routers.postgrest.tls.certresolver: letsencrypt
      traefik.http.routers.postgrest.tls: "true"
      traefik.http.services.postgrest.loadbalancer.server.port: 3000
    networks:
      ingress:
      internal:

  postgres:
    image: postgres:${POSTGRES_IMAGE_TAG:-15}
    restart: unless-stopped
    environment:
      POSTGRES_DB: app_db
      POSTGRES_USER: app_user
      POSTGRES_PASSWORD: secret
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./sql/init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    networks:
      internal:

volumes:
  postgres-data: {}

networks:
  # internal network for backing services
  internal:

  # ingress network
  ingress:
    name: external_web
    # TODO find fix
    # `docker-compose` expects string, `docker compose` expects boolean
    # external: "true"
    external: true
